#TODO: ImageComperssion
from typing import (
    Literal,
    Tuple,
    Iterable,
    Iterator,
    SupportsFloat,
    overload,
)

VectorLike = Iterable[SupportsFloat]

class Antenna:
    fixed: bool

class Applicatrion:
    class ConsolePane:
        contents: str
        def clear(self, /) -> None: ...
    
    class ModelView:
        class DenceCloudViewMode: ...
        class ModelViewMode: ...
        class PointCloudViewMode: ...
        class TiledModelViewMode: ...
        def captureView(
            self,
            width: int,
            height: int,
            transparent: bool,
            hide_items: bool
        ) -> Image: ...
    
class AttachedGeometry: ...

class Calibration: ...


Channel = Literal["RGB", "RGBA"]
Datatype = Literal["U8", "U16", "U32", "F16", "F32", "F64"]
class Image:
    @classmethod
    def open(
        cls,
        path: str,
        layer: int = 0,
        datatype: Datatype = "U8",
        /,
        channels: Channel = None,
        x: int = None,
        y: int = None,
        width: int = None,
        height: int = None,
    ) -> Image: ...
    @classmethod
    def fromstring(
        cls,
        data: str,
        width: int,
        height: int,
        channels: Channel,
        /,
        datatype: Datatype = None
    ) -> Image: ...
    def __init__(
        self,
        width: int,
        height: int,
        channels: Channel,
        /,
        datatype: Datatype = None
    ) -> None:...
    @property
    def width(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def channels(self, /) -> Channel: ...
    @property
    def cn(self, /) -> int: ...
    @property
    def data_type(self, /) -> Datatype: ...
    
    def save(self, filename: str, /, compression: ImageCompression) -> None: ...
    def tostring(self) -> str: ...
    def copy() -> Image: ...
    def resize(self, width: int, height: int) -> Image: ...
    def convert(self, channels: Channel, /, datatype: Datatype) -> Image: ...
    def gaussianBlur(self, radius: SupportsFloat, /) -> Image: ...
    def undistort(self, calib: Calibration, center_principal_point: bool = True, square_pixels: bool = True, /) -> Image: ...
    def uniformNoise(self, amplitude: float) -> Image: ...
    def warp(self, calib0: Calibration, trans0: Matrix, calib1: Calibration, trans1: Matrix) -> Image: ...
    
    
class ImageCompression:
    ...

class Matrix:
    size: Tuple[int, int]
    def __init__(self, matrix: Iterable[VectorLike]) -> None: ...
    @classmethod
    def Diag(cls, vector: VectorLike, /) -> Matrix: ...
    @classmethod
    def Rotaion(self, matrix: Matrix, /) -> Matrix: ...
    @classmethod
    def Scale(scale: VectorLike, /) -> Matrix: ...
    @classmethod
    def Translation(cls, vector: VectorLike, /) -> Matrix: ...
    def col(self, index: int, /) -> Vector: ...
    def copy(self, /) -> Matrix: ...
    def data(self, /) -> float: ...
    def inv(self, /) -> Matrix: ...
    def mulp(self, point: Vector, /) -> Vector: ...
    def mulv(self, vector: Vector, /) -> Vector: ...
    def rotation(self, /) -> Matrix: ...
    def row(self, index: int, /) -> Vector: ...
    def scale(self, /) -> float: ...
    def svd(self, /) -> Tuple[Matrix, Vector, Matrix]: ...
    def t(self, /) -> Matrix: ...
    def translation(self, /) -> Vector: ...
    def zero(self, /) -> None: ...


class Vector:
    w: float
    x: float
    y: float
    z: float
    size: int
    def __init__(self, vec: VectorLike, /) -> None: ...
    def __add__(self, value: Vector ,/) -> Vector: ...
    def __sub__(self, value: Vector, /) -> Vector: ...
    @overload
    def __mul__(self, value: Vector, /) -> float: ...
    @overload
    def __mul__(self, value: SupportsFloat, /) -> Vector: ...
    def __div__(self, value: Vector, /) -> Vector: ...
    def __getitem__(self, key: int, /) -> float: ...
    def __setitem__(self, key: int, value: SupportsFloat, /) -> None: ...
    def __iter__(self, /) -> Iterator[float]: ...
    def copy(self, /) -> Vector: ...
    def cross(self, a: Vector, b: Vector, /) -> Vector: ...
    def norm(self, /) -> float: ...
    def norm2(self, /) -> float: ...
    def normalize(self, /) -> None: ...
    def normalized(self, /) -> Vector: ...
    def zero(self, /) -> None: ...
    @property
    def x(self, /) -> float: ...
    @x.set
    def x(self, x: SupportsFloat, /): ...
    @property
    def y(self, /) -> float: ...
    @y.set
    def y(self, y: SupportsFloat, /): ...
    @property
    def z(self, /) -> float: ...
    @z.set
    def z(self, z: SupportsFloat, /): ...
    @property
    def w(self, /) -> float: ...
    @w.set
    def w(self, w: SupportsFloat, /): ...

class Version:
    bulid: int
    major: int
    micro: int
    minor: int
    def copy(self, /) -> Version: ...